

use FlexiBookPersistence.ump; 

class FlexiBook {
  1 <@>- 0..1 Business business;
  1 <@>- 0..1 Owner owner;
  1 <@>- * Customer customers;
  1 <@>- * BusinessHour hours;
  1 <@>- * Appointment appointments;
  1 <@>- * TimeSlot timeSlots;
  1 <@>- * BookableService bookableServices;
}

class User {
  abstract;
  unique username;
  password;
}

class Owner {
  isA User;
}

class Customer {
  isA User;
  int noShow;
}

class Business {
  name;
  address;
  phoneNumber;
  email;
  // since there is only one business in this system, the first
  // 0..1 should be a 1. since this is a directed association, the
  // first multiplicity is not taken into account. hence, it is 
  // changed to 0..1 to avoid Umple issuing warning W036
  // Unmanaged Multiplicity
  0..1 -> * BusinessHour businessHours;
  0..1 -> * TimeSlot holidays;
  0..1 -> * TimeSlot vacation;
  // association to Owner is not modeled because there is
  // only one owner and only one business in the system
}

class BusinessHour {
  enum DayOfWeek { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }
  DayOfWeek dayOfWeek;
  Time startTime;
  Time endTime;
}
  
class TimeSlot {
  Date startDate;
  Time startTime;
  Date endDate;
  Time endTime;
}

class BookableService {
  abstract;
  unique name;
}

class Service {
  isA BookableService;
  int duration;
  // if downtimeDuration is 0, then downtimeStart is irrelevant
  int downtimeDuration;
  int downtimeStart;
}

class ServiceCombo {
  isA BookableService;
  * -> 0..1 ComboItem mainService;
  // the services should be {ordered}; however, since Umple translates every * association
  // or composition into a list, it is possible to order items in that list given Umple's API
  1 <@>- 2..* ComboItem services;
}

class ComboItem {
  Boolean mandatory;
  * -> 1 Service service;
}

class Appointment {
  * -- 1 Customer customer;
  * -- 1 BookableService bookableService;
  * -> * ComboItem chosenItems;
  0..1 -> 1 TimeSlot timeSlot;
}

class SystemTime {
	depend java.time.LocalDate;
	depend java.time.LocalTime;
	depend java.sql.Date;
	depend java.sql.Time;

	
	private static Date sysDate = null;
	private static Time sysTime = null;

	/*
	 * @author: Fadi Tawfik Beshay
	 */
	public static Date getSysDate() {
		return sysDate;
	}

	/*
	 * @author: Fadi Tawfik Beshay
	 */
	public static Time getSysTime() {
		return sysTime;
	}

	/*
	 * @author: Eric Chehata
	 */
	public static void setSysDate(Date date) {
		sysDate = date;
	}

	/*
	 * @author: Eric Chehata
	 */
	public static void setSysTime(Time time) {
		sysTime = time;
	}
	
	/*
	 * @author: Robert Aprahamian
	 * @param: s, String that corresponds to the system date and time
	 */
	public static void setSysDateAndTime(String s) {
		String date = s.substring(0, 10);
		String time = s.substring(11, 16);
		String[] dateInArray = date.split("-");
		String[] timeInArray = time.split(":");
		LocalDate localDate = LocalDate.of(Integer.parseInt(dateInArray[0]), Integer.parseInt(dateInArray[1]), Integer.parseInt(dateInArray[2]));
		LocalTime localTime = LocalTime.of(Integer.parseInt(timeInArray[0]), Integer.parseInt(timeInArray[1]));
		sysDate = Date.valueOf(localDate);
		sysTime = Time.valueOf(localTime);
	}
	}
